{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "MemberSuite REST API"
  },
  "host": "rest.membersuite.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/security/v1/about": {
      "get": {
        "tags": [
          "About"
        ],
        "summary": "Check the health of the Security REST services",
        "operationId": "About_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/associationpolicys/{tenantid}": {
      "get": {
        "tags": [
          "AssociationPolicys"
        ],
        "summary": "Searches for AssociationPolicys",
        "operationId": "AssociationPolicys_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/associationpolicys/description/{tenantid}": {
      "get": {
        "tags": [
          "AssociationPolicys"
        ],
        "summary": "Retrieves a description of the properties and requirements for the AssociationPolicy object",
        "operationId": "AssociationPolicys_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The AssociationPolicy description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/associationpolicys/{id}": {
      "get": {
        "tags": [
          "AssociationPolicys"
        ],
        "summary": "Retrieves a single AssociationPolicy identified by the supplied ID",
        "operationId": "AssociationPolicys_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssociationPolicy"
            }
          },
          "304": {
            "description": "The AssociationPolicy has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A AssociationPolicy with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "AssociationPolicys"
        ],
        "summary": "Creates or updates an AssociationPolicy with a specific ID",
        "operationId": "AssociationPolicys_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete AssociationPolicy to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/AssociationPolicy"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/associationpolicys": {
      "post": {
        "tags": [
          "AssociationPolicys"
        ],
        "summary": "Creates a new AssociationPolicy",
        "operationId": "AssociationPolicys_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The new AssociationPolicy to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/AssociationPolicy"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/associationpolicys/delete/{id}": {
      "delete": {
        "tags": [
          "AssociationPolicys"
        ],
        "summary": "Deletes an AssociationPolicy with a specific ID",
        "operationId": "AssociationPolicys_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the AssociationPolicy to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/associationroles/{tenantid}": {
      "get": {
        "tags": [
          "AssociationRoles"
        ],
        "summary": "Searches for AssociationRoles",
        "operationId": "AssociationRoles_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/associationroles/description/{tenantid}": {
      "get": {
        "tags": [
          "AssociationRoles"
        ],
        "summary": "Retrieves a description of the properties and requirements for the AssociationRole object",
        "operationId": "AssociationRoles_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The AssociationRole description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/associationroles/{id}": {
      "get": {
        "tags": [
          "AssociationRoles"
        ],
        "summary": "Retrieves a single AssociationRole identified by the supplied ID",
        "operationId": "AssociationRoles_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssociationRole"
            }
          },
          "304": {
            "description": "The AssociationRole has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A AssociationRole with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "AssociationRoles"
        ],
        "summary": "Creates or updates an AssociationRole with a specific ID",
        "operationId": "AssociationRoles_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete AssociationRole to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/AssociationRole"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/associationroles": {
      "post": {
        "tags": [
          "AssociationRoles"
        ],
        "summary": "Creates a new AssociationRole",
        "operationId": "AssociationRoles_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The new AssociationRole to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/AssociationRole"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/associationroles/delete/{id}": {
      "delete": {
        "tags": [
          "AssociationRoles"
        ],
        "summary": "Deletes an AssociationRole with a specific ID",
        "operationId": "AssociationRoles_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the AssociationRole to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/asyncstatus/{id}": {
      "get": {
        "tags": [
          "AsyncOperationStatus"
        ],
        "summary": "Gets the asynchronous operation status.",
        "operationId": "AsyncOperationStatus_GetAsyncOperationStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/certificateaccesscredentials/{tenantid}": {
      "get": {
        "tags": [
          "CertificateAccessCredentials"
        ],
        "summary": "Searches for CertificateAccessCredentials",
        "operationId": "CertificateAccessCredentials_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/certificateaccesscredentials/description/{tenantid}": {
      "get": {
        "tags": [
          "CertificateAccessCredentials"
        ],
        "summary": "Retrieves a description of the properties and requirements for the CertificateAccessCredential object",
        "operationId": "CertificateAccessCredentials_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The CertificateAccessCredential description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/certificateaccesscredentials/{id}": {
      "get": {
        "tags": [
          "CertificateAccessCredentials"
        ],
        "summary": "Retrieves a single CertificateAccessCredential identified by the supplied ID",
        "operationId": "CertificateAccessCredentials_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CertificateAccessCredential"
            }
          },
          "304": {
            "description": "The CertificateAccessCredential has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A CertificateAccessCredential with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "CertificateAccessCredentials"
        ],
        "summary": "Creates or updates an CertificateAccessCredential with a specific ID",
        "operationId": "CertificateAccessCredentials_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete CertificateAccessCredential to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/CertificateAccessCredential"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/certificateaccesscredentials": {
      "post": {
        "tags": [
          "CertificateAccessCredentials"
        ],
        "summary": "Creates a new CertificateAccessCredential",
        "operationId": "CertificateAccessCredentials_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The new CertificateAccessCredential to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/CertificateAccessCredential"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/certificateaccesscredentials/delete/{id}": {
      "delete": {
        "tags": [
          "CertificateAccessCredentials"
        ],
        "summary": "Deletes an CertificateAccessCredential with a specific ID",
        "operationId": "CertificateAccessCredentials_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the CertificateAccessCredential to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/clientapplications/{tenantid}": {
      "get": {
        "tags": [
          "ClientApplications"
        ],
        "summary": "Searches for ClientApplications",
        "operationId": "ClientApplications_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/clientapplications/description/{tenantid}": {
      "get": {
        "tags": [
          "ClientApplications"
        ],
        "summary": "Retrieves a description of the properties and requirements for the ClientApplication object",
        "operationId": "ClientApplications_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The ClientApplication description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/clientapplications/{id}": {
      "get": {
        "tags": [
          "ClientApplications"
        ],
        "summary": "Retrieves a single ClientApplication identified by the supplied ID",
        "operationId": "ClientApplications_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClientApplication"
            }
          },
          "304": {
            "description": "The ClientApplication has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A ClientApplication with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "ClientApplications"
        ],
        "summary": "Creates or updates an ClientApplication with a specific ID",
        "operationId": "ClientApplications_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete ClientApplication to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/ClientApplication"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/clientapplications": {
      "post": {
        "tags": [
          "ClientApplications"
        ],
        "summary": "Creates a new ClientApplication",
        "operationId": "ClientApplications_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The new ClientApplication to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/ClientApplication"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/clientapplications/delete/{id}": {
      "delete": {
        "tags": [
          "ClientApplications"
        ],
        "summary": "Deletes an ClientApplication with a specific ID",
        "operationId": "ClientApplications_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the ClientApplication to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/customerpolicys/{tenantid}": {
      "get": {
        "tags": [
          "CustomerPolicys"
        ],
        "summary": "Searches for CustomerPolicys",
        "operationId": "CustomerPolicys_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/customerpolicys/description/{tenantid}": {
      "get": {
        "tags": [
          "CustomerPolicys"
        ],
        "summary": "Retrieves a description of the properties and requirements for the CustomerPolicy object",
        "operationId": "CustomerPolicys_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The CustomerPolicy description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/customerpolicys/{id}": {
      "get": {
        "tags": [
          "CustomerPolicys"
        ],
        "summary": "Retrieves a single CustomerPolicy identified by the supplied ID",
        "operationId": "CustomerPolicys_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerPolicy"
            }
          },
          "304": {
            "description": "The CustomerPolicy has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A CustomerPolicy with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "CustomerPolicys"
        ],
        "summary": "Creates or updates an CustomerPolicy with a specific ID",
        "operationId": "CustomerPolicys_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete CustomerPolicy to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/CustomerPolicy"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/customerpolicys": {
      "post": {
        "tags": [
          "CustomerPolicys"
        ],
        "summary": "Creates a new CustomerPolicy",
        "operationId": "CustomerPolicys_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The new CustomerPolicy to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/CustomerPolicy"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/customerpolicys/delete/{id}": {
      "delete": {
        "tags": [
          "CustomerPolicys"
        ],
        "summary": "Deletes an CustomerPolicy with a specific ID",
        "operationId": "CustomerPolicys_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the CustomerPolicy to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/customerroles/{tenantid}": {
      "get": {
        "tags": [
          "CustomerRoles"
        ],
        "summary": "Searches for CustomerRoles",
        "operationId": "CustomerRoles_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/customerroles/description/{tenantid}": {
      "get": {
        "tags": [
          "CustomerRoles"
        ],
        "summary": "Retrieves a description of the properties and requirements for the CustomerRole object",
        "operationId": "CustomerRoles_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The CustomerRole description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/customerroles/{id}": {
      "get": {
        "tags": [
          "CustomerRoles"
        ],
        "summary": "Retrieves a single CustomerRole identified by the supplied ID",
        "operationId": "CustomerRoles_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomerRole"
            }
          },
          "304": {
            "description": "The CustomerRole has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A CustomerRole with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "CustomerRoles"
        ],
        "summary": "Creates or updates an CustomerRole with a specific ID",
        "operationId": "CustomerRoles_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete CustomerRole to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/CustomerRole"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/customerroles": {
      "post": {
        "tags": [
          "CustomerRoles"
        ],
        "summary": "Creates a new CustomerRole",
        "operationId": "CustomerRoles_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The new CustomerRole to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/CustomerRole"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/customerroles/delete/{id}": {
      "delete": {
        "tags": [
          "CustomerRoles"
        ],
        "summary": "Deletes an CustomerRole with a specific ID",
        "operationId": "CustomerRoles_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the CustomerRole to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/features/{tenantid}": {
      "get": {
        "tags": [
          "Features"
        ],
        "summary": "Searches for Features",
        "operationId": "Features_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/features/description/{tenantid}": {
      "get": {
        "tags": [
          "Features"
        ],
        "summary": "Retrieves a description of the properties and requirements for the Feature object",
        "operationId": "Features_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The Feature description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/features/{id}": {
      "get": {
        "tags": [
          "Features"
        ],
        "summary": "Retrieves a single Feature identified by the supplied ID",
        "operationId": "Features_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Feature"
            }
          },
          "304": {
            "description": "The Feature has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A Feature with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "Features"
        ],
        "summary": "Creates or updates an Feature with a specific ID",
        "operationId": "Features_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete Feature to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/Feature"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/features": {
      "post": {
        "tags": [
          "Features"
        ],
        "summary": "Creates a new Feature",
        "operationId": "Features_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The new Feature to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/Feature"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/features/delete/{id}": {
      "delete": {
        "tags": [
          "Features"
        ],
        "summary": "Deletes an Feature with a specific ID",
        "operationId": "Features_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Feature to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/portalusers/sso": {
      "post": {
        "tags": [
          "PortalUsers"
        ],
        "summary": "",
        "operationId": "PortalUsers_GetConciergeToken",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/portalusers/{tenantid}": {
      "get": {
        "tags": [
          "PortalUsers"
        ],
        "summary": "Searches for PortalUsers",
        "operationId": "PortalUsers_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      },
      "post": {
        "tags": [
          "PortalUsers"
        ],
        "summary": "Creates a new PortalUser",
        "operationId": "PortalUsers_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The new PortalUser to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/PortalUser"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/portalusers/description/{tenantid}": {
      "get": {
        "tags": [
          "PortalUsers"
        ],
        "summary": "Retrieves a description of the properties and requirements for the PortalUser object",
        "operationId": "PortalUsers_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The PortalUser description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/portalusers/attributes/{tenantId}": {
      "get": {
        "tags": [
          "PortalUsers"
        ],
        "summary": "Gets the attributes related to user.",
        "operationId": "PortalUsers_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenantId.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "username",
            "in": "query",
            "description": "The username.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "304": {
            "description": "The PortalUser description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/portalusers/{id}": {
      "get": {
        "tags": [
          "PortalUsers"
        ],
        "summary": "Retrieves a single PortalUser identified by the supplied ID",
        "operationId": "PortalUsers_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PortalUser"
            }
          },
          "304": {
            "description": "The PortalUser has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A PortalUser with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "PortalUsers"
        ],
        "summary": "Creates or updates an PortalUser with a specific ID",
        "operationId": "PortalUsers_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete PortalUser to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/PortalUser"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/portalusers/{tenantid}/new": {
      "post": {
        "tags": [
          "PortalUsers"
        ],
        "summary": "Creates a new PortalUser",
        "operationId": "PortalUsers_PostNew",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The new PortalUser to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/PortalUser"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/portalusers/delete/{id}": {
      "delete": {
        "tags": [
          "PortalUsers"
        ],
        "summary": "Deletes an PortalUser with a specific ID",
        "operationId": "PortalUsers_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the PortalUser to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/resellerpolicys/{tenantid}": {
      "get": {
        "tags": [
          "ResellerPolicys"
        ],
        "summary": "Searches for ResellerPolicys",
        "operationId": "ResellerPolicys_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/resellerpolicys/description/{tenantid}": {
      "get": {
        "tags": [
          "ResellerPolicys"
        ],
        "summary": "Retrieves a description of the properties and requirements for the ResellerPolicy object",
        "operationId": "ResellerPolicys_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The ResellerPolicy description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/resellerpolicys/{id}": {
      "get": {
        "tags": [
          "ResellerPolicys"
        ],
        "summary": "Retrieves a single ResellerPolicy identified by the supplied ID",
        "operationId": "ResellerPolicys_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResellerPolicy"
            }
          },
          "304": {
            "description": "The ResellerPolicy has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A ResellerPolicy with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "ResellerPolicys"
        ],
        "summary": "Creates or updates an ResellerPolicy with a specific ID",
        "operationId": "ResellerPolicys_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete ResellerPolicy to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/ResellerPolicy"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/resellerpolicys": {
      "post": {
        "tags": [
          "ResellerPolicys"
        ],
        "summary": "Creates a new ResellerPolicy",
        "operationId": "ResellerPolicys_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The new ResellerPolicy to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/ResellerPolicy"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/resellerpolicys/delete/{id}": {
      "delete": {
        "tags": [
          "ResellerPolicys"
        ],
        "summary": "Deletes an ResellerPolicy with a specific ID",
        "operationId": "ResellerPolicys_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the ResellerPolicy to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/resellerroles/{tenantid}": {
      "get": {
        "tags": [
          "ResellerRoles"
        ],
        "summary": "Searches for ResellerRoles",
        "operationId": "ResellerRoles_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/resellerroles/description/{tenantid}": {
      "get": {
        "tags": [
          "ResellerRoles"
        ],
        "summary": "Retrieves a description of the properties and requirements for the ResellerRole object",
        "operationId": "ResellerRoles_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The ResellerRole description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/resellerroles/{id}": {
      "get": {
        "tags": [
          "ResellerRoles"
        ],
        "summary": "Retrieves a single ResellerRole identified by the supplied ID",
        "operationId": "ResellerRoles_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResellerRole"
            }
          },
          "304": {
            "description": "The ResellerRole has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A ResellerRole with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "ResellerRoles"
        ],
        "summary": "Creates or updates an ResellerRole with a specific ID",
        "operationId": "ResellerRoles_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete ResellerRole to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/ResellerRole"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/resellerroles": {
      "post": {
        "tags": [
          "ResellerRoles"
        ],
        "summary": "Creates a new ResellerRole",
        "operationId": "ResellerRoles_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The new ResellerRole to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/ResellerRole"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/resellerroles/delete/{id}": {
      "delete": {
        "tags": [
          "ResellerRoles"
        ],
        "summary": "Deletes an ResellerRole with a specific ID",
        "operationId": "ResellerRoles_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the ResellerRole to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/secretkeyaccesscredentials/{tenantid}": {
      "get": {
        "tags": [
          "SecretKeyAccessCredentials"
        ],
        "summary": "Searches for SecretKeyAccessCredentials",
        "operationId": "SecretKeyAccessCredentials_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/secretkeyaccesscredentials/description/{tenantid}": {
      "get": {
        "tags": [
          "SecretKeyAccessCredentials"
        ],
        "summary": "Retrieves a description of the properties and requirements for the SecretKeyAccessCredential object",
        "operationId": "SecretKeyAccessCredentials_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The SecretKeyAccessCredential description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/secretkeyaccesscredentials/{id}": {
      "get": {
        "tags": [
          "SecretKeyAccessCredentials"
        ],
        "summary": "Retrieves a single SecretKeyAccessCredential identified by the supplied ID",
        "operationId": "SecretKeyAccessCredentials_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SecretKeyAccessCredential"
            }
          },
          "304": {
            "description": "The SecretKeyAccessCredential has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A SecretKeyAccessCredential with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "SecretKeyAccessCredentials"
        ],
        "summary": "Creates or updates an SecretKeyAccessCredential with a specific ID",
        "operationId": "SecretKeyAccessCredentials_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete SecretKeyAccessCredential to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/SecretKeyAccessCredential"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/secretkeyaccesscredentials": {
      "post": {
        "tags": [
          "SecretKeyAccessCredentials"
        ],
        "summary": "Creates a new SecretKeyAccessCredential",
        "operationId": "SecretKeyAccessCredentials_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The new SecretKeyAccessCredential to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/SecretKeyAccessCredential"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/secretkeyaccesscredentials/delete/{id}": {
      "delete": {
        "tags": [
          "SecretKeyAccessCredentials"
        ],
        "summary": "Deletes an SecretKeyAccessCredential with a specific ID",
        "operationId": "SecretKeyAccessCredentials_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the SecretKeyAccessCredential to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/securityroles/{tenantid}": {
      "get": {
        "tags": [
          "SecurityRoles"
        ],
        "summary": "Searches for SecurityRoles",
        "operationId": "SecurityRoles_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/securityroles/description/{tenantid}": {
      "get": {
        "tags": [
          "SecurityRoles"
        ],
        "summary": "Retrieves a description of the properties and requirements for the SecurityRole object",
        "operationId": "SecurityRoles_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The SecurityRole description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/securityroles/{id}": {
      "get": {
        "tags": [
          "SecurityRoles"
        ],
        "summary": "Retrieves a single SecurityRole identified by the supplied ID",
        "operationId": "SecurityRoles_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SecurityRole"
            }
          },
          "304": {
            "description": "The SecurityRole has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A SecurityRole with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "SecurityRoles"
        ],
        "summary": "Creates or updates an SecurityRole with a specific ID",
        "operationId": "SecurityRoles_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete SecurityRole to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/SecurityRole"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/securityroles": {
      "post": {
        "tags": [
          "SecurityRoles"
        ],
        "summary": "Creates a new SecurityRole",
        "operationId": "SecurityRoles_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The new SecurityRole to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/SecurityRole"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/securityroles/delete/{id}": {
      "delete": {
        "tags": [
          "SecurityRoles"
        ],
        "summary": "Deletes an SecurityRole with a specific ID",
        "operationId": "SecurityRoles_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the SecurityRole to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/statements/{tenantid}": {
      "get": {
        "tags": [
          "Statements"
        ],
        "summary": "Searches for Statements",
        "operationId": "Statements_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/statements/description/{tenantid}": {
      "get": {
        "tags": [
          "Statements"
        ],
        "summary": "Retrieves a description of the properties and requirements for the Statement object",
        "operationId": "Statements_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The Statement description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/statements/{id}": {
      "get": {
        "tags": [
          "Statements"
        ],
        "summary": "Retrieves a single Statement identified by the supplied ID",
        "operationId": "Statements_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Statement"
            }
          },
          "304": {
            "description": "The Statement has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A Statement with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "Statements"
        ],
        "summary": "Creates or updates an Statement with a specific ID",
        "operationId": "Statements_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete Statement to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/Statement"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/statements": {
      "post": {
        "tags": [
          "Statements"
        ],
        "summary": "Creates a new Statement",
        "operationId": "Statements_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The new Statement to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/Statement"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/statements/delete/{id}": {
      "delete": {
        "tags": [
          "Statements"
        ],
        "summary": "Deletes an Statement with a specific ID",
        "operationId": "Statements_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Statement to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/systemwidepolicys/{tenantid}": {
      "get": {
        "tags": [
          "SystemWidePolicys"
        ],
        "summary": "Searches for SystemWidePolicys",
        "operationId": "SystemWidePolicys_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/systemwidepolicys/description/{tenantid}": {
      "get": {
        "tags": [
          "SystemWidePolicys"
        ],
        "summary": "Retrieves a description of the properties and requirements for the SystemWidePolicy object",
        "operationId": "SystemWidePolicys_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The SystemWidePolicy description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/systemwidepolicys/{id}": {
      "get": {
        "tags": [
          "SystemWidePolicys"
        ],
        "summary": "Retrieves a single SystemWidePolicy identified by the supplied ID",
        "operationId": "SystemWidePolicys_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemWidePolicy"
            }
          },
          "304": {
            "description": "The SystemWidePolicy has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A SystemWidePolicy with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "SystemWidePolicys"
        ],
        "summary": "Creates or updates an SystemWidePolicy with a specific ID",
        "operationId": "SystemWidePolicys_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete SystemWidePolicy to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/SystemWidePolicy"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/systemwidepolicys": {
      "post": {
        "tags": [
          "SystemWidePolicys"
        ],
        "summary": "Creates a new SystemWidePolicy",
        "operationId": "SystemWidePolicys_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The new SystemWidePolicy to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/SystemWidePolicy"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/systemwidepolicys/delete/{id}": {
      "delete": {
        "tags": [
          "SystemWidePolicys"
        ],
        "summary": "Deletes an SystemWidePolicy with a specific ID",
        "operationId": "SystemWidePolicys_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the SystemWidePolicy to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/systemwideroles/{tenantid}": {
      "get": {
        "tags": [
          "SystemWideRoles"
        ],
        "summary": "Searches for SystemWideRoles",
        "operationId": "SystemWideRoles_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/systemwideroles/description/{tenantid}": {
      "get": {
        "tags": [
          "SystemWideRoles"
        ],
        "summary": "Retrieves a description of the properties and requirements for the SystemWideRole object",
        "operationId": "SystemWideRoles_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The SystemWideRole description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/systemwideroles/{id}": {
      "get": {
        "tags": [
          "SystemWideRoles"
        ],
        "summary": "Retrieves a single SystemWideRole identified by the supplied ID",
        "operationId": "SystemWideRoles_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SystemWideRole"
            }
          },
          "304": {
            "description": "The SystemWideRole has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A SystemWideRole with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "SystemWideRoles"
        ],
        "summary": "Creates or updates an SystemWideRole with a specific ID",
        "operationId": "SystemWideRoles_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete SystemWideRole to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/SystemWideRole"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/systemwideroles": {
      "post": {
        "tags": [
          "SystemWideRoles"
        ],
        "summary": "Creates a new SystemWideRole",
        "operationId": "SystemWideRoles_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The new SystemWideRole to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/SystemWideRole"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/systemwideroles/delete/{id}": {
      "delete": {
        "tags": [
          "SystemWideRoles"
        ],
        "summary": "Deletes an SystemWideRole with a specific ID",
        "operationId": "SystemWideRoles_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the SystemWideRole to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/usergroups/{tenantid}": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Searches for UserGroups",
        "operationId": "UserGroups_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "msql",
            "in": "query",
            "description": "The MSQL statement to execute",
            "required": "true",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve if the search returns more records than the specified pageSize",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page",
            "required": "true",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tenantid",
            "in": "path",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/usergroups/description/{tenantid}": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Retrieves a description of the properties and requirements for the UserGroup object",
        "operationId": "UserGroups_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The tenantid.",
            "required": "true",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "304": {
            "description": "The UserGroup description has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/usergroups/{id}": {
      "get": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Retrieves a single UserGroup identified by the supplied ID",
        "operationId": "UserGroups_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "etag value from cached response",
            "required": "false",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "304": {
            "description": "The UserGroup has not been modified since you last retrieved it"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "A UserGroup with the supplied ID could not be found"
          }
        },
        "deprecated": "false"
      },
      "put": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Creates or updates an UserGroup with a specific ID",
        "operationId": "UserGroups_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": "true",
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "description": "The complete UserGroup to create or update",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully updated",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to update it"
          },
          "409": {
            "description": "The update failed because this record has been updated by another user. Please retrieve the record again and retry the update"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/usergroups": {
      "post": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Creates a new UserGroup",
        "operationId": "UserGroups_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The new UserGroup to create",
            "required": "true",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "201": {
            "description": "Record was successfully created",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "The request could not be processed - the payload was missing or malformed"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          }
        },
        "deprecated": "false"
      }
    },
    "/security/v1/usergroups/delete/{id}": {
      "delete": {
        "tags": [
          "UserGroups"
        ],
        "summary": "Deletes an UserGroup with a specific ID",
        "operationId": "UserGroups_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html",
          "application/hal+json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the UserGroup to delete",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "access token",
            "required": "true",
            "type": "string"
          },
          {
            "name": "Asynchronous",
            "in": "header",
            "description": "Asynchronous operation",
            "required": "false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was successfully deleted"
          },
          "400": {
            "description": "The request could not be processed - an ID must be specified"
          },
          "401": {
            "description": "Authorization denied. Check Authorization token and Security settings for this user"
          },
          "404": {
            "description": "Could not find the specified record in order to delete it"
          }
        },
        "deprecated": "false"
      }
    }
  },
  "definitions": {
    "Object": {
      "type": "object",
      "properties": {}
    },
    "AssociationPolicy": {
      "type": "object",
      "properties": {
        "features": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "statements": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expires": {
          "format": "date-time",
          "type": "string"
        },
        "isConfiguration": {
          "type": "boolean",
          "readOnly": "true"
        },
        "isActive": {
          "type": "boolean"
        },
        "securityLock": {
          "$ref": "#/definitions/SecurityLock"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    },
    "SecurityLock": {
      "type": "object",
      "properties": {
        "participants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityLockParticipant"
          }
        }
      }
    },
    "SecurityLockParticipant": {
      "type": "object",
      "properties": {
        "roleID": {
          "type": "string"
        },
        "accessLevel": {
          "format": "int32",
          "enum": [
            0,
            10,
            20
          ],
          "type": "integer"
        }
      }
    },
    "AssociationRole": {
      "type": "object",
      "properties": {
        "isConfiguration": {
          "type": "boolean",
          "readOnly": "true"
        },
        "isActive": {
          "type": "boolean"
        },
        "securityLock": {
          "$ref": "#/definitions/SecurityLock"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    },
    "CertificateAccessCredential": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isConfiguration": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    },
    "ClientApplication": {
      "type": "object",
      "properties": {
        "userPoolClient": {
          "type": "string"
        },
        "isConfiguration": {
          "type": "boolean",
          "readOnly": "true"
        },
        "isActive": {
          "type": "boolean"
        },
        "securityLock": {
          "$ref": "#/definitions/SecurityLock"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    },
    "CustomerPolicy": {
      "type": "object",
      "properties": {
        "features": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "statements": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expires": {
          "format": "date-time",
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isConfiguration": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    },
    "CustomerRole": {
      "type": "object",
      "properties": {
        "customer": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isConfiguration": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    },
    "Feature": {
      "type": "object",
      "properties": {
        "statements": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expires": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isConfiguration": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    },
    "PortalUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isConfiguration": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "securityLock": {
          "$ref": "#/definitions/SecurityLock"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "isSuperUser": {
          "type": "boolean"
        },
        "timeZone": {
          "type": "string"
        },
        "passwordHash": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "firstLoginDate": {
          "format": "date-time",
          "type": "string"
        },
        "lastLoggedIn": {
          "format": "date-time",
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "securityQuestion": {
          "type": "string"
        },
        "securityAnswer": {
          "type": "string"
        },
        "mustChangePassword": {
          "type": "boolean"
        },
        "owner": {
          "type": "string"
        },
        "lastLoggedInAs": {
          "type": "string"
        },
        "lastAssociation": {
          "type": "string"
        },
        "loginFailures": {
          "format": "int32",
          "type": "integer"
        },
        "baseCurrency": {
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    },
    "ResellerPolicy": {
      "type": "object",
      "properties": {
        "features": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "statements": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expires": {
          "format": "date-time",
          "type": "string"
        },
        "reseller": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isConfiguration": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    },
    "ResellerRole": {
      "type": "object",
      "properties": {
        "reseller": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isConfiguration": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    },
    "SecretKeyAccessCredential": {
      "type": "object",
      "properties": {
        "secretKey": {
          "format": "byte",
          "type": "string"
        },
        "isSecretKeyEncrypted": {
          "type": "boolean"
        },
        "user": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isConfiguration": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    },
    "SecurityRole": {
      "type": "object",
      "properties": {
        "keyChain": {
          "$ref": "#/definitions/KeyChain"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isConfiguration": {
          "type": "boolean"
        },
        "isActive": {
          "type": "boolean"
        },
        "securityLock": {
          "$ref": "#/definitions/SecurityLock"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    },
    "KeyChain": {
      "type": "object",
      "properties": {
        "securityRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "commands": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "canAccessAllCommands": {
          "type": "boolean"
        },
        "reports": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "canAccessAllReports": {
          "type": "boolean"
        },
        "tabs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "canAccessAllTabs": {
          "type": "boolean"
        },
        "recordTypes": {
          "type": "object",
          "additionalProperties": {
            "format": "int32",
            "enum": [
              0,
              10,
              20
            ],
            "type": "integer"
          }
        },
        "hasFullAccessToAllRecordTypes": {
          "type": "boolean"
        }
      }
    },
    "Statement": {
      "type": "object",
      "properties": {
        "effect": {
          "format": "int32",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Object"
          }
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Resource"
          }
        },
        "expires": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isConfiguration": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    },
    "Resource": {
      "type": "object",
      "properties": {
        "reseller": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "association": {
          "type": "string"
        },
        "objectId": {
          "type": "string"
        },
        "field": {
          "type": "string"
        }
      }
    },
    "SystemWidePolicy": {
      "type": "object",
      "properties": {
        "features": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "statements": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expires": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isConfiguration": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    },
    "SystemWideRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isConfiguration": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    },
    "UserGroup": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isConfiguration": {
          "type": "boolean",
          "readOnly": "true"
        },
        "isActive": {
          "type": "boolean"
        },
        "securityLock": {
          "$ref": "#/definitions/SecurityLock"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "keywords": {
          "type": "string"
        },
        "lastModifiedBy": {
          "type": "string"
        },
        "lastModifiedByName": {
          "type": "string"
        },
        "lastModifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "lockedForDeletion": {
          "type": "boolean"
        },
        "isSealed": {
          "type": "boolean"
        },
        "systemTimestamp": {
          "format": "byte",
          "type": "string"
        },
        "existsInNoSQL": {
          "type": "boolean"
        }
      }
    }
  }
}